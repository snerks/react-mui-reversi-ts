{"version":3,"sources":["components/Header.tsx","components/BoardList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","theme","createStyles","root","backgroundColor","margin","cell","display","justifyContent","height","alignItems","token","padding","spacing","breakpoints","up","fontSize","BoardList","props","cellNumbers","Array","from","map","e","i","console","log","useTheme","GridList","cols","cellHeight","cellNumber","Math","floor","cellColor","GridListTile","key","style","color","App","useState","createMuiTheme","palette","type","ThemeProvider","elevation","Grid","container","direction","item","xs","sm","alignContent","Button","variant","fullWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.876b5632.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1\r\n  }\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Material UI Reversi Sample\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch checked={isDarkMode} onChange={() => setIsDarkMode(!isDarkMode)} />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Paper, Grid, GridList, GridListTile, makeStyles, createStyles } from \"@material-ui/core\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: \"white\",\r\n            margin: \"15px 0\"\r\n        },\r\n        cell: {\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"green\",\r\n            height: \"100%\",\r\n            alignItems: \"center\"\r\n        },\r\n        token: {\r\n            padding: theme.spacing(1),\r\n            [theme.breakpoints.up('xs')]: {\r\n                fontSize: 30,\r\n            },\r\n            [theme.breakpoints.up('sm')]: {\r\n                fontSize: 40,\r\n            },\r\n            [theme.breakpoints.up('md')]: {\r\n                fontSize: 60,\r\n            },\r\n            // [theme.breakpoints.up('lg')]: {\r\n            //     fontSize: 100,\r\n            // },\r\n        }\r\n    }),\r\n);\r\n\r\nconst BoardList: React.FC<{}> = (props) => {\r\n    const classes = useStyles();\r\n    const cellNumbers = Array.from(Array(64)).map((e, i) => i);\r\n\r\n    console.log(cellNumbers);\r\n\r\n    const theme = useTheme();\r\n    // const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <GridList cols={8} cellHeight=\"auto\">\r\n                {cellNumbers.map((cellNumber) => {\r\n                    const rowNumber = Math.floor(cellNumber / 8);\r\n                    const rowCellNumber = cellNumber % 8\r\n                    const cellColor = rowCellNumber % 2 === 0 ? \"black\" : \"white\";\r\n\r\n                    return (\r\n                        <GridListTile key={cellNumber} cols={1}>\r\n                            <div className={classes.cell}>\r\n                                <FiberManualRecordIcon className={classes.token} style={{ color: cellColor }} />\r\n                            </div>\r\n                        </GridListTile>\r\n                    );\r\n                })}\r\n            </GridList>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardList;","import React, { useState } from 'react';\n\nimport { Paper, Grid, Typography, Button, ThemeProvider, createMuiTheme, Card, CardContent } from \"@material-ui/core\";\nimport Header from './components/Header';\nimport BoardList from './components/BoardList';\n\nfunction App() {\n\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarkMode ? \"dark\" : \"light\",\n    }\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper elevation={0}>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\n          </Grid>\n          {/* <Grid item>\n            <Card>\n              <CardContent>\n                <Typography variant=\"body1\" gutterBottom>\n                  Sample application, implemented in React, Material UI and TypeScript. Also supports Dark theme switching.\n              </Typography>\n              </CardContent>\n            </Card>\n          </Grid> */}\n          <Grid item container>\n            <Grid item xs={1} sm={2} />\n            <Grid item xs={10} sm={8}>\n              <BoardList />\n            </Grid>\n            <Grid item xs={1} sm={2} />\n          </Grid>\n          {/* <Grid item container>\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"body1\">\n                    Sample application, implemented in React, Material UI and TypeScript. Also supports Dark theme switching.\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid> */}\n          <Grid item container>\n            <Grid item xs={1} sm={2} />\n            <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\">\n              <Button variant=\"contained\" color=\"primary\" fullWidth style={{ margin: 3 }}>\n                Restart\n              </Button>\n\n              <Button variant=\"contained\" color=\"default\" fullWidth style={{ margin: 3 }}>\n                Select Random Cell\n              </Button>\n\n              <Button variant=\"contained\" color=\"default\" fullWidth style={{ margin: 3 }}>\n                Pass\n              </Button>\n            </Grid>\n            <Grid item xs={1} sm={2} />\n          </Grid>\n        </Grid>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}