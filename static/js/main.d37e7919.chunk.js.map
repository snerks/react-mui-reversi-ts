{"version":3,"sources":["components/Header.tsx","components/GameCell.tsx","components/GameBoardList.tsx","components/GamePageList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","GameCell","this","props","row","column","isWhite","handleClick","isValid","currentPlayerIsWhite","isOccupied","undefined","discColor","emptyCellText","emptyCellContent","style","fontSize","color","content","onClick","cursor","React","theme","createStyles","root","margin","cell","display","justifyContent","backgroundColor","height","alignItems","token","padding","spacing","breakpoints","up","initialGameBoard","GameBoardList","initialBoard","useState","Array","from","map","e","i","cellNumbers","boardState","setBoardState","setCurrentPlayerIsWhite","passCount","setPassCount","console","log","useEffect","selectRandomValidCell","getBoardCellIndex","getAdjacentCellStatusAndIndex","rowOffest","columnOffset","candidateCellLineItemRowIndex","candidateCellLineItemColumnIndex","candidateCellLineItemIndex","status","index","getAdjacentCellLines","result","push","getAdjacentCellLine","adjacentCellStatusAndIndex","items","currentRowIndex","currentColumnIndex","getValidCellIndices","board","emptyCellStatusAndIndexItems","gameCellIsWhiteStatus","filter","emptyCell","emptyCellsWithAdjacentOpponentCell","emptyCellStatusAndIndexItem","adjacentCellLines","adjacentCellLine","length","adjacentOpponentCellCount","adjacentCellIsWhiteStatus","adjacentCellIsPopulated","handleCellClick","boardCellIndex","capturedCellIndices","adjacentOppentCellIndices","currentAdjacentCellStatusAndIndex","getCapturedCellIndices","nextBoard","currentGameCellIsWhiteStatus","indexOf","pass","validCells","getBoardCellCoords","emptyCells","item","whitePlayerCells","blackPlayerCells","isGameFinished","winnerName","whitePlayerCellCount","blackPlayerCellCount","currentPlayerContent","Grid","container","alignContent","xs","justify","Badge","showZero","badgeContent","sm","GridList","cols","cellHeight","cellNumber","rowNumber","Math","floor","rowCellNumber","isValidCell","GridListTile","key","BottomNavigation","value","event","newValue","showLabels","BottomNavigationAction","label","icon","GamePageList","App","createMuiTheme","palette","type","ThemeProvider","elevation","square","paddingBottom","direction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d37e7919.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1\r\n  }\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Material UI Reversi Sample\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch checked={isDarkMode} onChange={() => setIsDarkMode(!isDarkMode)} />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import * as React from 'react';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nexport interface GameCellProps {\n    row: number;\n    column: number;\n\n    isWhite?: boolean;\n\n    isValid: boolean;\n\n    handleClick: (row: number, column: number) => void;\n\n    currentPlayerIsWhite: boolean;\n}\n\nclass GameCell extends React.Component<GameCellProps, {}> {\n    render() {\n        const { row, column, isWhite, handleClick, isValid, currentPlayerIsWhite } = this.props;\n\n        const isOccupied = isWhite !== undefined;\n\n        let discColor = isOccupied ? isWhite ? 'white' : 'black' : undefined;\n\n        let emptyCellText = '\\u00a0';\n\n        if (!isOccupied && isValid) {\n            emptyCellText = '\\u2713';\n\n            discColor = currentPlayerIsWhite ? 'white' : 'black';\n        }\n\n        const emptyCellContent = <span style={{ fontSize: '24px', color: discColor }}>{emptyCellText}</span>;\n\n        // const discContent = isOccupied ? '🌑' : emptyCellContent;\n        const discContent = isOccupied ? (\n            // <i className=\"glyphicon glyphicon-certificate\" aria-hidden=\"true\" />\n            // <span\n            //     style={{\n            //         display: 'inline-block',\n            //         width: '2em',\n            //         height: '2em',\n            //         borderRadius: '1em',\n            //         margin: '0.25em',\n            //         backgroundColor: discColor ? discColor : undefined\n            //     }}\n            // />\n            <FiberManualRecordIcon /* className={classes.token} */ style={{ color: discColor }} />\n\n        ) : emptyCellContent;\n\n        // const content = <span style={{ fontSize: '10px', color: discColor }}>{discContent}</span>;\n        const content = discContent;\n\n        return (\n            <div\n                // tslint:disable-next-line:no-empty\n                onClick={isOccupied ? () => { } : () => handleClick(row, column)}\n                style={{ cursor: isValid ? 'pointer' : 'not-allowed' }}\n            >\n                {content}\n            </div>\n        );\n    }\n}\n\nexport default GameCell;\n","import React, {\r\n    useState, /*, useEffect */\r\n    useEffect\r\n} from \"react\";\r\nimport {\r\n    GridList,\r\n    GridListTile,\r\n    makeStyles,\r\n    createStyles,\r\n    Grid,\r\n    Button,\r\n    BottomNavigation,\r\n    BottomNavigationAction,\r\n    Badge\r\n} from \"@material-ui/core\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\r\nimport SentimentVeryDissatisfied from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport { GameCellIsWhiteStatus } from \"../types/CustomTypes\";\r\nimport GameCell from \"./GameCell\";\r\n// import { GameBoardState } from \"./GameBoard\";\r\n// import { GameBoardState } from \"./GameBoard\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            // backgroundColor: \"white\",\r\n            margin: \"15px 0\"\r\n        },\r\n        cell: {\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"green\",\r\n            height: \"100%\",\r\n            alignItems: \"center\"\r\n        },\r\n        token: {\r\n            padding: theme.spacing(1),\r\n            [theme.breakpoints.up('xs')]: {\r\n                fontSize: 17,\r\n            },\r\n            // [theme.breakpoints.up('sm')]: {\r\n            //     fontSize: 40,\r\n            // },\r\n            [theme.breakpoints.up('md')]: {\r\n                fontSize: 40,\r\n            },\r\n            // [theme.breakpoints.up('lg')]: {\r\n            //     fontSize: 100,\r\n            // },\r\n        }\r\n    }),\r\n);\r\n\r\nexport const initialGameBoard: GameCellIsWhiteStatus[] = [\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, true, false, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, false, true, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n];\r\n\r\ninterface CellStatusAndIndex {\r\n    status: GameCellIsWhiteStatus;\r\n    index: number;\r\n}\r\n\r\ninterface CellLine {\r\n    items: CellStatusAndIndex[];\r\n}\r\n\r\ninterface GameBoardListProps {\r\n    initialBoard: GameCellIsWhiteStatus[];\r\n}\r\n\r\nconst GameBoardList: React.FC<GameBoardListProps> = ({ initialBoard }) => {\r\n    const classes = useStyles();\r\n    // const cellNumbers = Array.from(board).map((e, i) => i);\r\n\r\n    const [cellNumbers] = useState(Array.from(initialBoard).map((e, i) => i));\r\n    const [boardState, setBoardState] = useState(initialBoard);\r\n    const [currentPlayerIsWhite, setCurrentPlayerIsWhite] = useState(false);\r\n    // const [validCells, setValidCells] = useState<number[]>([]);\r\n    const [passCount, setPassCount] = useState(0);\r\n\r\n    console.log(\"currentPlayerIsWhite\", currentPlayerIsWhite);\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect : currentPlayerIsWhite : \", currentPlayerIsWhite);\r\n\r\n        // Computer plays as white\r\n        if (currentPlayerIsWhite) {\r\n            selectRandomValidCell();\r\n            return;\r\n        }\r\n\r\n    }, [currentPlayerIsWhite]);\r\n\r\n    const getCapturedCellIndices = (currentPlayerIsWhite: boolean, boardCellIndex: number): number[] => {\r\n        let result: number[] = [];\r\n\r\n        const column = boardCellIndex % 8;\r\n        const row = (boardCellIndex - column) / 8;\r\n\r\n        const adjacentCellLines = getAdjacentCellLines(row, column);\r\n\r\n        for (let adjacentCellLine of adjacentCellLines) {\r\n            if (adjacentCellLine.items.length) {\r\n\r\n                let adjacentOpponentCellCount = 0;\r\n                const adjacentOppentCellIndices: number[] = [];\r\n\r\n                for (let i = 0; i < adjacentCellLine.items.length; i++) {\r\n                    let currentAdjacentCellStatusAndIndex = adjacentCellLine.items[i];\r\n\r\n                    let adjacentCellIsWhiteStatus = currentAdjacentCellStatusAndIndex.status;\r\n                    let adjacentCellIsPopulated = adjacentCellIsWhiteStatus !== undefined;\r\n\r\n                    if (!adjacentCellIsPopulated) {\r\n                        break;\r\n                    }\r\n\r\n                    let adjacentCellIsOpponentCell = (\r\n                        adjacentCellIsPopulated &&\r\n                            currentPlayerIsWhite ?\r\n                            !adjacentCellIsWhiteStatus : adjacentCellIsWhiteStatus\r\n                    );\r\n\r\n                    if (adjacentCellIsOpponentCell) {\r\n                        adjacentOpponentCellCount++;\r\n                        adjacentOppentCellIndices.push(currentAdjacentCellStatusAndIndex.index);\r\n                    } else {\r\n                        // Is current player cell\r\n                        if (adjacentOpponentCellCount > 0) {\r\n                            result = [\r\n                                ...result,\r\n                                ...adjacentOppentCellIndices\r\n                            ];\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    const getBoardCellIndex = (row: number, column: number): number => {\r\n        return row * 8 + column;\r\n    }\r\n\r\n    const getAdjacentCellStatusAndIndex = (\r\n        row: number,\r\n        column: number,\r\n        rowOffest: number,\r\n        columnOffset: number\r\n    ): CellStatusAndIndex | null => {\r\n\r\n        const candidateCellLineItemRowIndex = row + rowOffest;\r\n        const candidateCellLineItemColumnIndex = column + columnOffset;\r\n\r\n        const candidateCellLineItemRowIndexIsInRange =\r\n            candidateCellLineItemRowIndex > -1 &&\r\n            candidateCellLineItemRowIndex < 8;\r\n\r\n        const candidateCellLineItemColumnIndexIsInRange =\r\n            candidateCellLineItemColumnIndex > -1 &&\r\n            candidateCellLineItemColumnIndex < 8;\r\n\r\n        const candidateCellLineItemCoordsInRange =\r\n            candidateCellLineItemRowIndexIsInRange &&\r\n            candidateCellLineItemColumnIndexIsInRange;\r\n\r\n        if (!candidateCellLineItemCoordsInRange) {\r\n            return null;\r\n        }\r\n\r\n        const candidateCellLineItemIndex =\r\n            getBoardCellIndex(candidateCellLineItemRowIndex, candidateCellLineItemColumnIndex);\r\n\r\n        // const candidateCellLineItemIsWhiteStatus = state.board[candidateCellLineItemIndex];\r\n        const candidateCellLineItemIsWhiteStatus = boardState[candidateCellLineItemIndex];\r\n\r\n        return {\r\n            status: candidateCellLineItemIsWhiteStatus,\r\n            index: candidateCellLineItemIndex\r\n        };\r\n    }\r\n\r\n    const getAdjacentCellLines = (row: number, column: number): CellLine[] => {\r\n\r\n        const result: CellLine[] = [];\r\n\r\n        // start at 12 o'clock\r\n        result.push(getAdjacentCellLine(row, column, -1, 0));\r\n        result.push(getAdjacentCellLine(row, column, -1, 1));\r\n        result.push(getAdjacentCellLine(row, column, 0, 1));\r\n        result.push(getAdjacentCellLine(row, column, 1, 1));\r\n        result.push(getAdjacentCellLine(row, column, 1, 0));\r\n        result.push(getAdjacentCellLine(row, column, 1, -1));\r\n        result.push(getAdjacentCellLine(row, column, 0, -1));\r\n        result.push(getAdjacentCellLine(row, column, -1, -1));\r\n\r\n        return result;\r\n    }\r\n\r\n    const getAdjacentCellLine = (\r\n        row: number,\r\n        column: number,\r\n        rowOffest: number,\r\n        columnOffset: number): CellLine => {\r\n\r\n        const result: CellLine = {\r\n            items: []\r\n        };\r\n\r\n        let currentRowIndex = row;\r\n        let currentColumnIndex = column;\r\n\r\n        let adjacentCellStatusAndIndex: CellStatusAndIndex | null;\r\n\r\n        do {\r\n            adjacentCellStatusAndIndex =\r\n                getAdjacentCellStatusAndIndex(\r\n                    currentRowIndex,\r\n                    currentColumnIndex,\r\n                    rowOffest,\r\n                    columnOffset\r\n                );\r\n\r\n            if (adjacentCellStatusAndIndex) {\r\n                result.items.push(adjacentCellStatusAndIndex);\r\n\r\n                currentRowIndex += rowOffest;\r\n                currentColumnIndex += columnOffset;\r\n            }\r\n        } while (!!adjacentCellStatusAndIndex);\r\n\r\n        return result;\r\n    }\r\n\r\n    const getValidCellIndices = (board: GameCellIsWhiteStatus[], currentPlayerIsWhite: boolean): number[] => {\r\n\r\n        const cellStatusAndIndexItems = board.map(\r\n            (gameCellIsWhiteStatus: GameCellIsWhiteStatus, index: number): CellStatusAndIndex => {\r\n                const isEmptyCell = gameCellIsWhiteStatus === undefined;\r\n\r\n                if (isEmptyCell) {\r\n                    return {\r\n                        status: gameCellIsWhiteStatus,\r\n                        index\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    status: gameCellIsWhiteStatus,\r\n                    index: -1\r\n                };\r\n            });\r\n\r\n        const emptyCellStatusAndIndexItems = cellStatusAndIndexItems.filter(emptyCell => emptyCell.index > -1);\r\n\r\n        const emptyCellsWithAdjacentOpponentCell: CellStatusAndIndex[] = [];\r\n\r\n        for (let emptyCellStatusAndIndexItem of emptyCellStatusAndIndexItems) {\r\n            const column = emptyCellStatusAndIndexItem.index % 8;\r\n            const row = (emptyCellStatusAndIndexItem.index - column) / 8;\r\n\r\n            const adjacentCellLines = getAdjacentCellLines(row, column);\r\n\r\n            for (let adjacentCellLine of adjacentCellLines) {\r\n                if (adjacentCellLine.items.length) {\r\n\r\n                    let adjacentOpponentCellCount = 0;\r\n\r\n                    for (let i = 0; i < adjacentCellLine.items.length; i++) {\r\n                        const currentAdjacentCellStatusAndIndex = adjacentCellLine.items[i];\r\n\r\n                        const adjacentCellIsWhiteStatus = currentAdjacentCellStatusAndIndex.status;\r\n                        const adjacentCellIsPopulated = adjacentCellIsWhiteStatus !== undefined;\r\n\r\n                        if (!adjacentCellIsPopulated) {\r\n                            break;\r\n                        }\r\n\r\n                        const adjacentCellIsOpponentCell = (\r\n                            adjacentCellIsPopulated &&\r\n                                currentPlayerIsWhite ?\r\n                                !adjacentCellIsWhiteStatus : adjacentCellIsWhiteStatus\r\n                        );\r\n\r\n                        if (adjacentCellIsOpponentCell) {\r\n                            adjacentOpponentCellCount++;\r\n                        } else {\r\n                            // Is current player cell\r\n                            if (adjacentOpponentCellCount > 0) {\r\n                                emptyCellsWithAdjacentOpponentCell.push(emptyCellStatusAndIndexItem);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return emptyCellsWithAdjacentOpponentCell.map(emptyCell => emptyCell.index);\r\n    }\r\n\r\n    const handleCellClick = (row: number, column: number) => {\r\n        console.log(\"handleCellClick : Start\", row, column);\r\n\r\n        const boardCellIndex = getBoardCellIndex(row, column);\r\n\r\n        console.log(\"handleCellClick : currentPlayerIsWhite\", currentPlayerIsWhite);\r\n\r\n        const capturedCellIndices =\r\n            getCapturedCellIndices(currentPlayerIsWhite, boardCellIndex);\r\n\r\n        const nextBoard: GameCellIsWhiteStatus[] = [];\r\n\r\n        for (let i = 0; i < boardState.length; i++) {\r\n            if (i === boardCellIndex) {\r\n                nextBoard.push(currentPlayerIsWhite);\r\n            } else {\r\n                const currentGameCellIsWhiteStatus = boardState[i];\r\n\r\n                if (capturedCellIndices.indexOf(i) > -1) {\r\n                    nextBoard.push(currentPlayerIsWhite);\r\n                } else {\r\n                    nextBoard.push(currentGameCellIsWhiteStatus);\r\n                }\r\n            }\r\n        }\r\n\r\n        // const validCells = getValidCells(nextBoard, !currentPlayerIsWhite);\r\n\r\n        setBoardState(nextBoard);\r\n        setCurrentPlayerIsWhite(!currentPlayerIsWhite);\r\n        // setValidCells(validCells);\r\n        setPassCount(0);\r\n\r\n        console.log(\"handleCellClick : End\", row, column);\r\n    }\r\n\r\n    const restart = () => {\r\n        // const nextState = {\r\n        //     board: initialGameBoard,\r\n        //     currentPlayerIsWhite: false,\r\n        //     validCells: [],\r\n        //     passCount: 0\r\n        // };\r\n\r\n        // const nextStateValidCells = getValidCells(initialGameBoard);\r\n\r\n        // this.setState({\r\n        //     board: nextState.board,\r\n        //     currentPlayerIsWhite: nextState.currentPlayerIsWhite,\r\n        //     validCells: nextStateValidCells,\r\n        //     passCount: 0\r\n        // });\r\n\r\n        setBoardState(initialGameBoard);\r\n        setCurrentPlayerIsWhite(false);\r\n        // setValidCells(nextStateValidCells);\r\n        // validCells = getValidCells(boardState);\r\n        setPassCount(0);\r\n    }\r\n\r\n    const pass = () => {\r\n        // tslint:disable-next-line:no-console\r\n        // console.log(`pass: currentPlayerIsWhite = ${this.state.currentPlayerIsWhite}`);\r\n\r\n        // const nextState = {\r\n        //     board: board,\r\n        //     currentPlayerIsWhite: !currentPlayerIsWhite,\r\n        //     validCells: [],\r\n        //     passCount: passCount + 1\r\n        // };\r\n\r\n        // const nextStateValidCells = getValidCells(boardState);\r\n\r\n        // this.setState({\r\n        //     board: nextState.board,\r\n        //     currentPlayerIsWhite: nextState.currentPlayerIsWhite,\r\n        //     validCells: nextStateValidCells,\r\n        //     passCount: nextState.passCount\r\n        // });\r\n\r\n        // setBoardState(board);\r\n        setCurrentPlayerIsWhite(!currentPlayerIsWhite);\r\n        // setValidCells(nextStateValidCells);\r\n        // validCells = getValidCells(boardState);\r\n        setPassCount(passCount + 1);\r\n    }\r\n\r\n    const getBoardCellCoords = (index: number): { row: number, column: number } => {\r\n        const column = index % 8;\r\n        const row = (index - column) / 8;\r\n\r\n        return { row, column };\r\n    }\r\n\r\n    const selectRandomValidCell = () => {\r\n        const validCells = getValidCellIndices(boardState, currentPlayerIsWhite);\r\n        if (validCells.length === 0) {\r\n            // tslint:disable-next-line:no-console\r\n            // console.log('No valid cell is available - passing');\r\n            pass();\r\n            return;\r\n        }\r\n\r\n        const randomValidCellIndex = validCells[0];\r\n\r\n        const { row, column } = getBoardCellCoords(randomValidCellIndex);\r\n\r\n        handleCellClick(row, column);\r\n    }\r\n\r\n    const discColor = currentPlayerIsWhite ? 'white' : 'black';\r\n\r\n    const discContent = (\r\n        <span\r\n            style={{\r\n                display: 'inline-block',\r\n                width: '1em',\r\n                height: '1em',\r\n                borderRadius: '0.5em',\r\n                margin: '0.125em',\r\n                backgroundColor: discColor\r\n            }}\r\n        />\r\n    );\r\n\r\n    const emptyCells = boardState.filter(item => item === undefined);\r\n    const whitePlayerCells = boardState.filter(item => item !== undefined && item);\r\n    const blackPlayerCells = boardState.filter(item => item !== undefined && !item);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    // console.log(`passCount = ${this.state.passCount}`);\r\n    const isGameFinished = (emptyCells.length === 0) || (passCount > 1);\r\n\r\n    let winnerName: string = '';\r\n\r\n    if (isGameFinished) {\r\n        const whitePlayerCellCount = whitePlayerCells.length;\r\n        const blackPlayerCellCount = blackPlayerCells.length;\r\n\r\n        if (whitePlayerCellCount === blackPlayerCellCount) {\r\n            winnerName = 'Neither: It was a Draw.';\r\n        } else {\r\n            winnerName = whitePlayerCellCount > blackPlayerCellCount ? 'White' : 'Black';\r\n        }\r\n    }\r\n\r\n    const validCells = getValidCellIndices(boardState, currentPlayerIsWhite);\r\n    console.log(\"currentPlayerIsWhite\", currentPlayerIsWhite);\r\n    console.log(\"validCells\", validCells);\r\n\r\n    const currentPlayerContent = (\r\n        <div className=\"row\" /* role=\"alert\" */ /* style={{ background: \"green\", padding: 15 }} */>\r\n            {/* {\r\n                isGameFinished &&\r\n                <div className=\"col-md-12\">\r\n                    <div style={{ fontSize: '20px', color: winnerName }}>\r\n                        <span>Winner is {winnerName}!</span>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                isGameFinished && passCount > 1 &&\r\n                <div className=\"col-md-12\">\r\n                    <div style={{ fontSize: '20px', color: winnerName }}>\r\n                        <span>Both players have passed - game finished early</span>\r\n                    </div>\r\n                </div>\r\n            } */}\r\n            {/* {\r\n                !isGameFinished &&\r\n                <div className=\"col-md-12\">\r\n                    <div style={{ fontSize: '20px', color: discColor }}>\r\n                        <span>Current Player: {discContent}</span>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className=\"col-md-12\">\r\n                <div style={{ fontSize: '20px', color: 'white' }}>\r\n                    <div>White: <span>{whitePlayerCells.length}</span></div>\r\n                </div>\r\n                <div style={{ fontSize: '20px', color: 'black' }}>\r\n                    <div>Black: <span>{blackPlayerCells.length}</span></div>\r\n                </div>\r\n            </div> */}\r\n            {/* \r\n            {\r\n                isGameFinished &&\r\n                <Grid item container>\r\n                    <Grid item xs={1} sm={2} />\r\n                    <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                        <Grid item>\r\n                            <div style={{ fontSize: '20px', color: winnerName }}>\r\n                                <span>Winner is {winnerName}!</span>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={2} />\r\n                </Grid>\r\n            } */}\r\n\r\n            {/* {\r\n                isGameFinished && passCount > 1 &&\r\n                <Grid item container>\r\n                    <Grid item xs={1} sm={2} />\r\n                    <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                        <Grid item>\r\n                            <div style={{ fontSize: '20px', color: winnerName }}>\r\n                                <span>Both players have passed - game finished early</span>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={2} />\r\n                </Grid>\r\n            } */}\r\n\r\n            {/* {\r\n                !isGameFinished &&\r\n                <Grid item container>\r\n                    <Grid item xs={1} sm={2} />\r\n                    <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                        <Grid item>\r\n                            <div style={{ fontSize: '20px', color: discColor }}>\r\n                                <span>Current Player: </span>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div style={{ fontSize: '20px', color: discColor }}>\r\n                                <span>{discContent}</span>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={2} />\r\n                </Grid>\r\n            } */}\r\n\r\n\r\n            {/* <Grid item container>\r\n                <Grid item xs={1} sm={2} />\r\n                <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                    <Grid item>\r\n                        <div style={{ fontSize: '20px', color: 'white' }}>\r\n                            <div>White:</div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <div style={{ fontSize: '20px', color: 'white' }}>\r\n                            <div><span>{whitePlayerCells.length}</span></div>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={1} sm={2} />\r\n            </Grid> */}\r\n\r\n            {/* <Grid item container>\r\n                <Grid item xs={1} sm={2} />\r\n                <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                    <Grid item>\r\n                        <div style={{ fontSize: '20px', color: 'black' }}>\r\n                            <div>Black:</div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <div style={{ fontSize: '20px', color: 'black' }}>\r\n                            <div><span>{blackPlayerCells.length}</span></div>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={1} sm={2} />\r\n            </Grid> */}\r\n\r\n            <Grid item container alignItems=\"center\" alignContent=\"space-between\">\r\n                <Grid item xs={3} />\r\n                <Grid item xs={3} container>\r\n                    <Grid item container justify=\"center\">\r\n                        <Badge color=\"secondary\" showZero badgeContent={whitePlayerCells.length}>\r\n                            <div style={{ color: \"white\" }}>\r\n                                <FiberManualRecordIcon />\r\n                            </div>\r\n                        </Badge>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={3} container>\r\n                    <Grid item container justify=\"center\">\r\n                        <Badge color=\"secondary\" showZero badgeContent={blackPlayerCells.length}>\r\n                            <div style={{ color: \"black\" }}>\r\n                                <FiberManualRecordIcon />\r\n                            </div>\r\n                        </Badge>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={3} />\r\n            </Grid>\r\n\r\n            {\r\n                isGameFinished &&\r\n                <Grid item container alignItems=\"center\" alignContent=\"space-between\">\r\n                    <Grid item xs={1} sm={2} />\r\n                    <Grid item xs={10} sm={8} container>\r\n                        <Grid container justify=\"center\">\r\n                            <div style={{ fontSize: '14px' }}>\r\n                                <span>Winner is {winnerName}!</span>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={2} />\r\n                </Grid>\r\n            }\r\n            {\r\n                isGameFinished && passCount > 1 &&\r\n                <Grid item container>\r\n                    <Grid item xs={1} sm={2} />\r\n                    <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                        <Grid item>\r\n                            <div style={{ fontSize: '14px', color: winnerName }}>\r\n                                <span>Both players have passed - game finished early</span>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={2} />\r\n                </Grid>\r\n            }\r\n\r\n            {/* <Grid item container>\r\n                <Grid item xs={1} sm={2} />\r\n                <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                    <Grid item>\r\n                        <Badge color=\"secondary\" badgeContent={blackPlayerCells.length}>\r\n                            <div style={{ color: \"black\" }}>\r\n                                <FiberManualRecordIcon />\r\n                            </div>\r\n                        </Badge>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={1} sm={2} />\r\n            </Grid> */}\r\n\r\n            {/* <Grid item container>\r\n                <Grid item xs={1} sm={2} />\r\n                <Grid item xs={10} sm={8} alignItems=\"center\" alignContent=\"space-between\" container>\r\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\" fullWidth style={{ margin: 3 }} onClick={() => restart()}>\r\n                        Restart\r\n                    </Button>\r\n\r\n                    {\r\n                        !isGameFinished &&\r\n                        <>\r\n                            <Button size=\"small\" variant=\"contained\" color=\"default\" fullWidth\r\n                                style={{\r\n                                    margin: 3,\r\n                                    cursor: validCells.length === 0 ?\r\n                                        'not-allowed' : 'auto'\r\n                                }}\r\n                                disabled={validCells.length === 0}\r\n                                onClick={() => selectRandomValidCell()}>\r\n                                Select Random Cell\r\n                            </Button>\r\n\r\n                            <Button size=\"small\" variant=\"contained\" color=\"default\" fullWidth style={{ margin: 3 }}\r\n                                onClick={() => pass()}>\r\n                                {\r\n                                    validCells.length === 0 && (\r\n                                        <span style={{ color: 'black' }}>No valid moves: </span>\r\n                                    )\r\n                                }\r\n                                <span>Pass</span>\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={1} sm={2} />\r\n            </Grid> */}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <GridList cols={8} cellHeight=\"auto\">\r\n                {cellNumbers.map((cellNumber) => {\r\n                    const rowNumber = Math.floor(cellNumber / 8);\r\n                    const rowCellNumber = cellNumber % 8\r\n                    // const cellColor = rowCellNumber % 2 === 0 ? \"black\" : \"white\";\r\n\r\n                    const isValidCell = validCells.indexOf(cellNumber) > -1;\r\n\r\n                    const noOp = () => { };\r\n                    const handleClickFunction = (row: number, column: number) => handleCellClick(row, column);\r\n\r\n                    return (\r\n                        <GridListTile key={cellNumber} cols={1}>\r\n                            <div className={classes.cell}>\r\n                                {/* <FiberManualRecordIcon className={classes.token} style={{ color: cellColor }} /> */}\r\n                                <GameCell\r\n                                    row={rowNumber}\r\n                                    column={rowCellNumber}\r\n                                    isWhite={boardState[cellNumber]}\r\n                                    handleClick={isValidCell ? handleClickFunction : noOp}\r\n                                    isValid={isValidCell}\r\n                                    currentPlayerIsWhite={currentPlayerIsWhite}\r\n                                />\r\n                            </div>\r\n                        </GridListTile>\r\n                    );\r\n                })}\r\n            </GridList>\r\n\r\n            {/* <h1>currentPlayerIsWhite = [{currentPlayerIsWhite ? \"Yes\" : \"No\"}]</h1> */}\r\n\r\n            <br />\r\n            {currentPlayerContent}\r\n\r\n            <BottomNavigation\r\n                value={null}\r\n                onChange={(event, newValue) => {\r\n                    // setValue(newValue);\r\n                    console.log(newValue);\r\n\r\n                    if (newValue === 0) {\r\n                        restart();\r\n                        return;\r\n                    }\r\n\r\n                    if (newValue === 1) {\r\n                        selectRandomValidCell();\r\n                        return;\r\n                    }\r\n\r\n                    if (newValue === 2) {\r\n                        pass();\r\n                        return;\r\n                    }\r\n                }}\r\n                showLabels\r\n                className={classes.root}\r\n            >\r\n                <BottomNavigationAction label=\"Restart\" icon={<RestoreIcon />} />\r\n\r\n                {\r\n                    !isGameFinished &&\r\n                    validCells.length > 0 &&\r\n                    <BottomNavigationAction\r\n                        label=\"Random\"\r\n                        icon={<ShuffleIcon />}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    !isGameFinished &&\r\n                    <BottomNavigationAction\r\n                        label={validCells.length === 0 ? \"Must Pass!\" : \"Pass\"}\r\n                        icon={<SentimentVeryDissatisfied />} />\r\n                }\r\n            </BottomNavigation>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoardList;","import * as React from 'react';\r\n\r\n// import { GameCellIsWhiteStatus } from '../types/CustomTypes';\r\n// import GameBoard from './GameBoard';\r\nimport GameBoardList, { initialGameBoard } from './GameBoardList';\r\n\r\n// export const initialGameBoard: GameCellIsWhiteStatus[] = [\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, true, false, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, false, true, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n//     undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n// ];\r\n\r\nexport interface GamePageListProps {\r\n}\r\n\r\nclass GamePageList extends React.Component<GamePageListProps, {}> {\r\n    render(): JSX.Element {\r\n        return (\r\n            <GameBoardList initialBoard={initialGameBoard} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default GamePageList;\r\n","import React, { useState } from 'react';\nimport { Paper, Grid, Button, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport Header from './components/Header';\n// import BoardList from './components/BoardList';\n// import GamePage from './components/GamePage';\n// import GameBoardList from './components/GameBoardList';\nimport GamePageList from './components/GamePageList';\n\nfunction App() {\n\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarkMode ? \"dark\" : \"light\",\n    }\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\n        <div style={{ paddingBottom: 100 }}>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\n            </Grid>\n            {/* <Grid item>\n            <Card>\n              <CardContent>\n                <Typography variant=\"body1\" gutterBottom>\n                  Sample application, implemented in React, Material UI and TypeScript. Also supports Dark theme switching.\n              </Typography>\n              </CardContent>\n            </Card>\n          </Grid> */}\n            <Grid item container>\n              <Grid item xs={1} sm={2} />\n              <Grid item xs={10} sm={8}>\n                {/* <BoardList /> */}\n                <GamePageList />\n              </Grid>\n              <Grid item xs={1} sm={2} />\n            </Grid>\n            {/* <Grid item container>\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"body1\">\n                    Sample application, implemented in React, Material UI and TypeScript. Also supports Dark theme switching.\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid> */}\n          </Grid>\n        </div>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}